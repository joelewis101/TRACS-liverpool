configfile:
	"config.yaml"

R1_suff = config['R1_suffix']
R2_suff = config['R2_suffix']
outputdir = config['output']
sample_type, sample_ids, seq_type = glob_wildcards(config['reads'] + "/{sample_type}/{sample}_{seq_type}"+R1_suff)

picks = [outputdir + "/" + a + "/" + b + "_" + c + "/output_files/high_QUAL_variants.tsv"
 for a,b,c in zip(sample_type, sample_ids, seq_type) if a == "picks"]

sweeps = [outputdir + "/" + a + "/" + b + "_" + c + "/output_files/high_QUAL_variants.tsv"
 for a,b,c in zip(sample_type, sample_ids, seq_type) if a == "sweeps"]
sample_read_paths = []
out_dirs = []
for a,b,c in zip(sample_type, sample_ids, seq_type):
  sample_read_paths.append(config['reads'] + "/" + a + "/" + b + "_" + c)
  out_dirs.append(config['output'] + "/" + a + "/" + b + "_" + c)


print("TRACS msweep pick vs sweep pipeline v0.1")
print("Read directory: "  + config['reads'])
print("Read suffixes: " + R1_suff + ", " + R2_suff)
print("Found sample types: ", sample_type)
print("Found sample IDs", sample_read_paths)
print("Found sequence types: ", seq_type)
print("Output directories: ", out_dirs)
print(picks)
print(sweeps)
# print("Found sample IDs: ", sample_ids)

rule all:
   input:
      # config['output'] + "/concat_mask.tsv",
      # config['output'] + "/concat_decomposed_pick_vars_unmasked.tsv",
      # config['output'] + "/concat_decomposed_sweep_vars_unmasked.tsv",
      # config['output'] + "/pick_vs_sweep_variants.tsv"
      config['output'] + "/variant_count.tsv",
      config['output'] + "/variant_count_filtered.tsv",
      config['output'] + "/snp_matrix.tsv"
      
rule snippy:
   input:
        reference = "Reference.fasta",
        r1 = config['reads']+"/{type}"+"/{sample}_{seq_type}"+R1_suff,
        r2 = config['reads']+"/{type}"+"/{sample}_{seq_type}"+R2_suff
   output:
        vcf = config['output'] + "/{type}/{sample}_{seq_type}/snps/snps.raw.vcf",
        bam = config['output'] + "/{type}/{sample}_{seq_type}/snps/snps.bam",
   params:
        snippyoutdir = directory(config['output'] + "/{type}/{sample}_{seq_type}/snps"),
        vcf = [r + "/snps/snps.raw.vcf" for r in out_dirs],
        bam = [r + "/snps/snps.bam" for r in out_dirs]
   priority:
        10
   log:
        config['output'] + "/{type}_{sample}_{seq_type}_snippy.log"
   shell:
        "snippy --force --outdir {params.snippyoutdir} --ref {input.reference} --R1 {input.r1} --R2 {input.r2} > {log} 2>&1"

# -----------------------------------------------------------------#

rule samtools_depth_calc:
    input:
       bam = config['output'] + "/{type}/{sample}_{seq_type}/snps/snps.bam"
    output:
       depth = config['output'] + "/{type}/{sample}_{seq_type}/output_files/samtools_depth.tsv"
    priority:
       9
    shell:
       """
       samtools depth -aa -q 13 -Q 60 -d 0 {input.bam} > {output.depth}
       sed  "s/^/{wildcards.sample}\t{wildcards.seq_type}\t/" {output.depth} > {output.depth}.tmp &&  mv {output.depth}.tmp {output.depth}
       """
#-------------------------------------------------------------------#
rule het_var:
  input:
     vcf = config['output'] + "/{type}/{sample}_{seq_type}/snps/snps.raw.vcf",
     reference = "Reference.fasta"
  output:
     het_var = config['output'] + "/{type}/{sample}_{seq_type}/output_files/het_variants.tsv"
  priority:
     9
  shell:
      """
      bcftools view --include 'FMT/GT!="1/1"' {input.vcf} |
      vt decompose -s - |
      vt decompose_blocksub - |
      vt normalize -r {input.reference} - |
      bcftools query -o {output.het_var} -f '%CHROM\t%POS\t%REF\t%ALT\t%TYPE\t[%GT]\t%QUAL\t[%AO]\t[%RO]\t[%DP]' -
      sed "s/^/{wildcards.sample}\t{wildcards.seq_type}\t/" {output.het_var} > {output.het_var}.tmp &&  mv {output.het_var}.tmp {output.het_var}
      """
#-------------------------------------------------------------------#
rule low_QUAL_var:
  input:
     vcf = config['output'] + "/{type}/{sample}_{seq_type}/snps/snps.raw.vcf",
     reference = "Reference.fasta"
  output:
     low_qual_var = config['output'] +
     "/{type}/{sample}_{seq_type}/output_files/low_QUAL_variants.tsv"
  priority:
     9
  shell:
      """
      bcftools view --include 'QUAL < 100 | FMT/DP<20 | (FMT/AO)/(FMT/DP)<0.85' {input.vcf} |
      vt decompose -s - |
      vt decompose_blocksub - |
      vt normalize -r {input.reference} - |
      bcftools query -o {output.low_qual_var} -f '%CHROM\t%POS\t%REF\t%ALT\t%TYPE\t[%GT]\t%QUAL\t[%AO]\t[%RO]\t[%DP]' -
      sed  "s/^/{wildcards.sample}\t{wildcards.seq_type}\t/" {output.low_qual_var} > {output.low_qual_var}.tmp &&  mv {output.low_qual_var}.tmp {output.low_qual_var}
      """
#-------------------------------------------------------------------#
rule high_QUAL_var:
  input:
     vcf = config['output'] + "/{type}/{sample}_{seq_type}/snps/snps.raw.vcf",
     reference = "Reference.fasta"
  output:
     high_qual_var = config['output'] +
     "/{type}/{sample}_{seq_type}/output_files/high_QUAL_variants.tsv"
  priority:
     9
  shell:
      """
      bcftools view --include 'QUAL >= 100  && FMT/DP>=20 && (FMT/AO)/(FMT/DP)>=0.85' {input.vcf} |
      vt decompose -s  - |
      vt decompose_blocksub - |
      vt normalize -r {input.reference} - |
      bcftools query -o {output.high_qual_var} -f '%CHROM\t%POS\t%REF\t%ALT\t%TYPE\t[%GT]\t%QUAL\t[%AO]\t[%RO]\t[%DP]' -
      sed "s/^/{wildcards.sample}\t{wildcards.seq_type}\t/" {output.high_qual_var} > {output.high_qual_var}.tmp &&  mv {output.high_qual_var}.tmp {output.high_qual_var}
      """
# -------------------------------------------------------------------#
rule filter_problem_variants:
   input:
     high_qual_var = config['output'] +
     "/{type}/{sample}_{seq_type}/output_files/high_QUAL_variants.tsv",
     reference = "Reference.fasta"
   output:
     high_qual_var_filt = config['output'] +
     "/{type}/{sample}_{seq_type}/output_files/high_QUAL_variants_filtered.tsv",
     problem_snps = config['output'] +
     "/{type}/{sample}_{seq_type}/output_files/problem_snps.tsv"
   priority: 8
   shell:
      """
      ./scripts/filter_problematic_snps.R -v {input.high_qual_var} -p {output.problem_snps} -f {output.high_qual_var_filt} -r {input.reference}
      """

#--------------------------------------------------------------------#
rule generate_pick_masks:
  input:
     samtools_depth = config['output'] + "/{type}/{sample}_{seq_type}/output_files/samtools_depth.tsv",
     low_qual_var = config['output'] + "/{type}/{sample}_{seq_type}/output_files/low_QUAL_variants.tsv",
     het_var = config['output'] + "/{type}/{sample}_{seq_type}/output_files/het_variants.tsv"
  output:
     msk = config['output'] + "/{type}/{sample}_{seq_type}/output_files/sites_to_mask.tsv",
  priority:
   8
  shell:
      """ 
      scripts/generate_pick_mask.R -t {wildcards.type} -d {input.samtools_depth} -s {input.het_var} -q {input.low_qual_var} -l 20 -o {output.msk}
      """

# -------------------------------------------------------------------#
rule concat_masks:
   input:
      [r + "/output_files/sites_to_mask.tsv" for r in out_dirs]
   output:
      config['output'] + "/concat_mask.tsv"
   params:
      outdir = config['output']
   priority:
     7
   shell:
      """
      find {params.outdir} -name "sites_to_mask.tsv" | xargs cat | cut -f2- | uniq > {output}
      """

# -------------------------------------------------------------------#
rule concat_pick_vars:
   input:
      [outputdir + "/" + a + "/" + b + "_" + c + "/output_files/high_QUAL_variants.tsv"
       for a,b,c in zip(sample_type, sample_ids, seq_type) if a == "picks"]
   output:
      config['output'] + "/concat_decomposed_pick_vars_unmasked.tsv"
   params:
      outdir = config['output']
   priority:
     6
   shell:
      """
      scripts/concatenate_decompose_variants.R -d {params.outdir}/picks -f high_QUAL_variants.tsv -o {output}
      """

# -------------------------------------------------------------------#
rule concat_sweep_vars:
   input:
      [outputdir + "/" + a + "/" + b + "_" + c + "/output_files/high_QUAL_variants.tsv"
       for a,b,c in zip(sample_type, sample_ids, seq_type) if a == "sweeps"]
   output:
      config['output'] + "/concat_decomposed_sweep_vars_unmasked.tsv"
   params:
      outdir = config['output']
   priority:
     6
   shell:
      """
      scripts/concatenate_decompose_variants.R -d {params.outdir}/sweeps -f high_QUAL_variants.tsv -o {output}
      """

# -------------------------------------------------------------------#
rule combine_and_mask_pick_and_sweep_vars:
   input: 
      sweep_vars = config['output'] +
      "/concat_decomposed_sweep_vars_unmasked.tsv",
      pick_vars = config['output'] +
      "/concat_decomposed_pick_vars_unmasked.tsv",
      mask = config['output'] + "/concat_mask.tsv"
   output:
      config['output'] + "/pick_vs_sweep_variants.tsv"
   priority:
      5
   shell:
      """
      scripts/combine_and_mask_variants.R -p {input.pick_vars} -s {input.sweep_vars} -m {input.mask} -o {output}
      """
# -------------------------------------------------------------------#
rule count_variants:
   input:
      config['output'] + "/pick_vs_sweep_variants.tsv"
   output:
      config['output'] + "/variant_count.tsv"
   priority:
      4
   shell:
      """
      scripts/count_variants.R -i {input} -o {output}
      """

# -------------------------------------------------------------------#
rule add_problem_snps_to_masks:
   input:
     problem_snps = config['output'] +
     "/{type}/{sample}_{seq_type}/output_files/problem_snps.tsv",
     msk = config['output'] + "/{type}/{sample}_{seq_type}/output_files/sites_to_mask.tsv"
   output:
     msk = config['output'] + "/{type}/{sample}_{seq_type}/output_files/sites_to_mask_filt.tsv",
   priority: 3
   shell:
      """
      ./scripts/combine_two_mask_files.R -a {input.problem_snps} -b {input.msk} -o {output.msk}
      """

# -------------------------------------------------------------------#
rule concat_masks_filt:
   input:
      [r + "/output_files/sites_to_mask_filt.tsv" for r in out_dirs]
   output:
      config['output'] + "/concat_mask_filt.tsv"
   params:
      outdir = config['output']
   priority:
     2
   shell:
      """
      find {params.outdir} -name "sites_to_mask_filt.tsv" | xargs cat | cut -f2- | uniq > {output}
      """

# -------------------------------------------------------------------#
rule concat_pick_vars_filt:
   input:
      [outputdir + "/" + a + "/" + b + "_" + c + "/output_files/high_QUAL_variants_filtered.tsv"
       for a,b,c in zip(sample_type, sample_ids, seq_type) if a == "picks"]
   output:
      config['output'] + "/concat_decomposed_pick_vars_filt_unmasked.tsv"
   params:
      outdir = config['output']
   priority:
     2
   shell:
      """
      scripts/concatenate_decompose_variants.R -d {params.outdir}/picks -f high_QUAL_variants_filtered.tsv -o {output}
      """

# -------------------------------------------------------------------#
rule concat_sweep_vars_filt:
   input:
      [outputdir + "/" + a + "/" + b + "_" + c + "/output_files/high_QUAL_variants_filtered.tsv"
       for a,b,c in zip(sample_type, sample_ids, seq_type) if a == "sweeps"]
   output:
      config['output'] + "/concat_decomposed_sweep_vars_filt_unmasked.tsv"
   params:
      outdir = config['output']
   priority:
     2
   shell:
      """
      scripts/concatenate_decompose_variants.R -d {params.outdir}/sweeps -f high_QUAL_variants_filtered.tsv -o {output}
      """

# -------------------------------------------------------------------#
rule combine_and_mask_pick_and_sweep_vars_filt:
   input: 
      sweep_vars = config['output'] +
      "/concat_decomposed_sweep_vars_filt_unmasked.tsv",
      pick_vars = config['output'] +
      "/concat_decomposed_pick_vars_filt_unmasked.tsv",
      mask = config['output'] + "/concat_mask_filt.tsv"
   output:
      config['output'] + "/pick_vs_sweep_variants_filtered.tsv"
   priority:
      1
   shell:
      """
      scripts/combine_and_mask_variants.R -p {input.pick_vars} -s {input.sweep_vars} -m {input.mask} -o {output}
      """
# -------------------------------------------------------------------#
rule count_variants_filt:
   input:
      config['output'] + "/pick_vs_sweep_variants_filtered.tsv"
   output:
      config['output'] + "/variant_count_filtered.tsv"
   priority:
      1
   shell:
      """
      scripts/count_variants.R -i {input} -o {output}
      """
# -------------------------------------------------------------------#
rule snp_matrix:
   input:
      config['output'] + "/pick_vs_sweep_variants_filtered.tsv"
   output:
      config['output'] + "/snp_matrix.tsv"
   priority:
      1
   shell:
      """
      scripts/generate_snp_matrix.R -i {input} -o {output}
      """
# -------------------------------------------------------------------#
