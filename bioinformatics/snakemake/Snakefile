configfile:
	"config.yaml"
R1_suff = config['R1_suffix']
R2_suff = config['R2_suffix']
sample_ids, = glob_wildcards(config['reads'] + "/{sample}"+R1_suff)
outputdir = config['output']

print("TRACS msweep pipeline v0.1")
print("Read directory: " + config['reads'])
print("Read suffixes: " + R1_suff + ", " + R2_suff)
print("Output directory: " + outputdir)
sample_ids, = glob_wildcards("data/{sample}"+R1_suff)
outputdir = config['output']
print("Found sample IDs: ", sample_ids)

rule all:
    input:
      expand("{outputdir}/snps_out/{sample}_snps/snps.raw.vcf", sample=sample_ids, outputdir=outputdir),
      expand("{outputdir}/snps_out/{sample}_snps/snps.bam", sample=sample_ids, outputdir=outputdir),
      expand("{outputdir}/snps_out/{sample}_snps", sample=sample_ids, outputdir=outputdir),
      expand("{outputdir}/vaf_files/{sample}.myfilt.vcf", sample=sample_ids, outputdir=outputdir),
      expand("{outputdir}/vaf_files/{sample}.mydepth.tsv", sample=sample_ids, outputdir=outputdir),
      expand("{outputdir}/vaf_files/{sample}.myVAF.tsv", sample=sample_ids, outputdir=outputdir),
      expand("{outputdir}/vaf_files/{sample}.allSNPS.tsv", sample=sample_ids, outputdir=outputdir)

rule snippy:
    input:
        reference = "Reference.fasta",
        r1 = config['reads']+"/{sample}"+R1_suff,
        r2 = config['reads']+"/{sample}"+R2_suff
    output:
        vcf = "{outputdir}/snps_out/{sample}_snps/snps.raw.vcf",
        bam = "{outputdir}/snps_out/{sample}_snps/snps.bam",
        snippyoutdir = directory("{outputdir}/snps_out/{sample}_snps")
    priority:
        10
    log:
        "{outputdir}/{sample}_snippy.log"
    shell:
        """
        rm -Rf {output.snippyoutdir}
        snippy --outdir {output.snippyoutdir} --ref {input.reference} --R1 {input.r1} --R2 {input.r2} > {log} 2>&1
        """


#-------------------------------------------------------------------#

rule split_complex_var:
    input:
       raw = "{outputdir}/snps_out/{sample}_snps/snps.raw.vcf",
       reference = "Reference.fasta"
    output:
       filt = "{outputdir}/vaf_files/{sample}.myfilt.vcf"
    priority:
       9
    shell:
        """
        bcftools view --include 'FMT/GT="1/1" & QUAL>=100 & FMT/DP>=10' {input.raw} |
        vt decompose_blocksub - |
        vt normalize -r {input.reference} - > {output.filt}
        """
#-------------------------------------------------------------------#

rule depth_calc:
    input:
       bam = "{outputdir}/snps_out/{sample}_snps/snps.bam"
    output:
       depth = "{outputdir}/vaf_files/{sample}.mydepth.tsv"
    priority:
       9
    shell:
       """
       samtools depth -aa -q 13 -Q 60 -d 0 {input.bam} > {output.depth}
       sed  "s/^/{wildcards.sample}\t/" {output.depth} > {output.depth}.tmp &&  mv {output.depth}.tmp {output.depth}
       """

#-------------------------------------------------------------------#s
rule pull_out_var_calc_VAF:
    input:
       filt = "{outputdir}/vaf_files/{sample}.myfilt.vcf"
    output:
       vaf = "{outputdir}/vaf_files/{sample}.myVAF.tsv"
    priority:
       8
    shell:
        """
        bcftools +fill-tags {input.filt} -- -t 'FORMAT/VAF:1=float(FORMAT/AO / (FORMAT/AO + FORMAT/RO))' | 
        bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t%TYPE\t[%VAF]\t[%AO]\t[%RO]\t[%DP]' > {output.vaf}
        sed  "s/^/{wildcards.sample}\t/" {output.vaf} > {output.vaf}.tmp &&  mv {output.vaf}.tmp {output.vaf}
        """

#-------------------------------------------------------------------# 

rule high_qual_hetsnps:
    input:
       raw = "{outputdir}/snps_out/{sample}_snps/snps.raw.vcf",
       reference = "Reference.fasta"
    output:
       all_snps = "{outputdir}/vaf_files/{sample}.allSNPS.tsv"
    priority:
       9
    shell:
       """
       bcftools view --include 'QUAL>=100' {input.raw} | 
       vt decompose_blocksub - | 
       vt normalize -r {input.reference} - | 
       vt decompose -s - | 
       bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t%TYPE\t[%AO]\t[%RO]\t[%DP]' > {output.all_snps}
       sed  "s/^/{wildcards.sample}\t/" {output.all_snps} > {output.all_snps}.tmp &&  mv {output.all_snps}.tmp {output.all_snps}
       """
#-------------------------------------------------------------------#
